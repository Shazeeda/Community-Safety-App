# Security Policy

This application was built with secure, real-world software development in mind â€” designed to demonstrate fullstack security best practices for both frontend and backend architecture.


## Security Features Implemented

### 1. **CORS Protection**
- CORS is enforced using FastAPIâ€™s `CORSMiddleware`
- Only requests from whitelisted origins (e.g., `http://localhost:3000`, `http://localhost:3002`) are accepted
- Prevents unwanted cross-origin attacks and browser-executed threats

### 2. **Token-Based Authorization (Frontend Ready)**
- The React frontend sends requests with a `Bearer <token>` header from `localStorage`
- Backend is prepped for future JWT validation using `python-jose` and `fastapi.security`
- Unauthorized requests are safely rejected with proper status codes

### 3. **Input Validation & Sanitization**
- All incoming data is strictly validated using Pydantic models (`models.py`)
- Prevents malformed payloads or injection-style attacks
- Ensures data shape, type safety, and required field enforcement

### 4. **Modular Route Security**
- All routes are split by responsibility in `routes.py`
- Secure practices can be scoped per route as needed (e.g., requiring tokens, admin-only access, etc.)

### 5. **Environment Variable Protection**
- All secrets (like auth tokens or database strings) are stored in `.env`
- `.gitignore` prevents `.env` from ever being committed to version control
- This aligns with 12-factor security principles



##  Future Security Enhancements

These are planned or easily supported:

- Full JWT token validation with expiry, issuer, and subject checks
- OAuth2 authentication (Google, GitHub, etc.)
- Role-based access control (RBAC)
- HTTPS enforcement via custom domain + AWS ACM certificate
- Rate limiting + logging via API Gateway (AWS)

---

## ðŸ“¢ Reporting Vulnerabilities

> Security is not a feature â€” itâ€™s a foundation.